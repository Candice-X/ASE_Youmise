{"remainingRequest":"/Users/kuer/Documents/GitHub/ASE_Youmise/umise/node_modules/babel-loader/lib/index.js!/Users/kuer/Documents/GitHub/ASE_Youmise/umise/node_modules/eslint-loader/index.js??ref--18-0!/Users/kuer/Documents/GitHub/ASE_Youmise/umise/src/store/modules/user.js","dependencies":[{"path":"/Users/kuer/Documents/GitHub/ASE_Youmise/umise/src/store/modules/user.js","mtime":1524342534919},{"path":"/Users/kuer/Documents/GitHub/ASE_Youmise/umise/package.json","mtime":1524551041812},{"path":"/Users/kuer/Documents/GitHub/ASE_Youmise/umise/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/kuer/Documents/GitHub/ASE_Youmise/umise/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/kuer/Documents/GitHub/ASE_Youmise/umise/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/kuer/Documents/GitHub/ASE_Youmise/umise/node_modules/@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"/Users/kuer/Documents/GitHub/ASE_Youmise/umise/node_modules/@babel/runtime/helpers/defineProperty\";\n\nvar _mutations;\n\nimport apis from '../../api/user';\nimport { init } from '../../api/apiGatewayClient';\nimport * as types from '../mutation-types';\nvar state = {\n  userName: null,\n  idToken: null,\n  userID: null,\n  email: \"\",\n  isLogin: false,\n  facebookid: '',\n  loading: false,\n  authenticated: 0,\n  challengeData: {},\n  friendList: [],\n  currentFriendId: ''\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, types.USER_LOGIN_REQUEST, function (state) {\n  state.loading = true;\n  state.authenticated = 0;\n}), _defineProperty(_mutations, types.USER_LOGIN_SUCCESS, function (state, _ref) {\n  var idToken = _ref.idToken;\n  state.loading = false;\n  state.authenticated = 1; // const keys = credentials.data.Credentials;\n  // init(keys.AccessKeyId, keys.SecretKey, keys.SessionToken);\n}), _defineProperty(_mutations, types.USER_LOGIN_FAILURE, function (state) {\n  state.loading = false;\n  state.authenticated = 0;\n}), _defineProperty(_mutations, types.USER_LOGIN_PASS_CHALLENGE_NEEDED, function (state, _ref2) {\n  var data = _ref2.data;\n  state.loading = false;\n  state.authenticated = 2;\n  delete data.userAttributes.email_verified;\n  state.challengeData = data;\n}), _defineProperty(_mutations, types.USER_LOGIN_PASS_CHALLENGE_REQUEST, function (state) {\n  state.loading = true;\n  state.challengeData.cognitoUser = null;\n}), _defineProperty(_mutations, types.USER_LOGIN_PASS_CHALLENGE_SUCCESS, function (state, _ref3) {\n  var idToken = _ref3.idToken;\n  state.loading = false;\n  state.authenticated = 1; // const keys = credentials.data.Credentials;\n  // init(keys.AccessKeyId, keys.SecretKey, keys.SessionToken);\n}), _defineProperty(_mutations, types.USER_LOGIN_PASS_CHALLENGE_FAILURE, function (state) {\n  state.loading = false;\n}), _defineProperty(_mutations, \"authUser\", function authUser(state, userData) {\n  state.userName = userData.userName;\n  state.idToken = userData.idToken;\n  state.userID = userData.userID;\n  state.isLogin = true;\n  state.authenticated = 1;\n}), _defineProperty(_mutations, \"clearAuthData\", function clearAuthData(state) {\n  state.idToken = null;\n  state.userName = null;\n  state.userID = null;\n  state.isLogin = false;\n  state.authenticated = 0; // state.UUID = null;\n}), _mutations);\nvar actions = {\n  login: function () {\n    var _login = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref4, _ref5) {\n      var commit, username, password, response, now, expirationDate, idToken, userID;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref4.commit;\n              username = _ref5.username, password = _ref5.password;\n              commit(types.USER_LOGIN_REQUEST);\n              _context.prev = 3;\n              _context.next = 6;\n              return apis.login(username, password);\n\n            case 6:\n              response = _context.sent;\n              console.log(\"store login status :\", response);\n\n              if (response.status === 1) {\n                //store in local storage\n                now = new Date();\n                expirationDate = new Date(now.getTime() + response.data.payload.exp);\n                console.log(\"Time exp: \", expirationDate);\n                idToken = response.data.jwtToken;\n                userID = response.data.payload['custom:uid'];\n                localStorage.setItem('idToken', idToken);\n                localStorage.setItem('userName', username);\n                localStorage.setItem('userID', userID);\n                localStorage.setItem('expirationDate', expirationDate);\n                commit('authUser', {\n                  'idToken': idToken,\n                  'userID': userID,\n                  'userName': username\n                });\n                commit(types.USER_LOGIN_SUCCESS, {\n                  credentials: response.data\n                });\n              } else if (response.status === 2) {\n                commit(types.USER_LOGIN_PASS_CHALLENGE_NEEDED, {\n                  data: response.data\n                });\n              }\n\n              return _context.abrupt(\"return\", response.status);\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              commit(types.USER_LOGIN_FAILURE);\n              throw _context.t0;\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[3, 12]]);\n    }));\n\n    return function login(_x, _x2) {\n      return _login.apply(this, arguments);\n    };\n  }(),\n  setLogoutTime: function setLogoutTime(_ref6, expirationTime) {\n    var commit = _ref6.commit;\n    setTimeout(function () {\n      commit('logout');\n    }, expirationTime * 1000);\n  },\n  logout: function logout(_ref7, routerData) {\n    var commit = _ref7.commit;\n    commit('clearAuthData');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('idToken');\n    localStorage.removeItem('userName');\n    localStorage.removeItem('userID');\n    routerData.push('/login');\n  },\n  tryAutoLogin: function tryAutoLogin(_ref8, routerData) {\n    var commit = _ref8.commit;\n    var token = localStorage.getItem('idToken');\n\n    if (!token) {\n      return;\n    }\n\n    var expirationDate = localStorage.getItem('expirationDate');\n    var now = new Date();\n\n    if (now >= expirationDate) {\n      return;\n    }\n\n    var userID = localStorage.getItem('userID');\n    var userName = localStorage.getItem('userName');\n    console.log('username', userName);\n    commit('authUser', {\n      'idToken': token,\n      'userID': userID,\n      'userName': userName\n    });\n    routerData.push('/mycard');\n  }\n};\nvar getters = {\n  getUserName: function getUserName() {\n    return state.userName;\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["src/store/modules/user.js"],"names":["apis","init","types","state","userName","idToken","userID","email","isLogin","facebookid","loading","authenticated","challengeData","friendList","currentFriendId","mutations","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAILURE","USER_LOGIN_PASS_CHALLENGE_NEEDED","data","userAttributes","email_verified","USER_LOGIN_PASS_CHALLENGE_REQUEST","cognitoUser","USER_LOGIN_PASS_CHALLENGE_SUCCESS","USER_LOGIN_PASS_CHALLENGE_FAILURE","userData","actions","login","commit","username","password","response","console","log","status","now","Date","expirationDate","getTime","payload","exp","jwtToken","localStorage","setItem","credentials","setLogoutTime","expirationTime","setTimeout","logout","routerData","removeItem","push","tryAutoLogin","token","getItem","getters","getUserName"],"mappings":"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","sourceRoot":"/Users/kuer/Documents/GitHub/ASE_Youmise/umise","sourcesContent":["import apis from '../../api/user';\nimport { init } from '../../api/apiGatewayClient';\nimport * as types from '../mutation-types';\n\nconst state = {\n  userName: null,\n  idToken: null,\n  userID: null,\n  email: \"\",\n  isLogin: false,\n  facebookid: '',\n  loading: false,\n  authenticated: 0,\n  challengeData: {},\n  friendList: [],\n  currentFriendId: '',\n};\n\nconst mutations = {\n  [types.USER_LOGIN_REQUEST](state) {\n    state.loading = true;\n    state.authenticated = 0;\n  },\n\n  [types.USER_LOGIN_SUCCESS](state, {\n    idToken\n  }) {\n    state.loading = false;\n    state.authenticated = 1;\n    // const keys = credentials.data.Credentials;\n    // init(keys.AccessKeyId, keys.SecretKey, keys.SessionToken);\n  },\n\n  [types.USER_LOGIN_FAILURE](state) {\n    state.loading = false;\n    state.authenticated = 0;\n  },\n\n  [types.USER_LOGIN_PASS_CHALLENGE_NEEDED](state, {\n    data\n  }) {\n    state.loading = false;\n    state.authenticated = 2;\n    delete data.userAttributes.email_verified;\n    state.challengeData = data;\n  },\n\n  [types.USER_LOGIN_PASS_CHALLENGE_REQUEST](state) {\n    state.loading = true;\n    state.challengeData.cognitoUser = null;\n  },\n\n  [types.USER_LOGIN_PASS_CHALLENGE_SUCCESS](state, {\n    idToken\n  }) {\n    state.loading = false;\n    state.authenticated = 1;\n    // const keys = credentials.data.Credentials;\n    // init(keys.AccessKeyId, keys.SecretKey, keys.SessionToken);\n  },\n\n  [types.USER_LOGIN_PASS_CHALLENGE_FAILURE](state) {\n    state.loading = false;\n  },\n\n  authUser(state, userData) {\n    state.userName = userData.userName;\n    state.idToken = userData.idToken;\n    state.userID = userData.userID;\n    state.isLogin = true;\n    state.authenticated = 1;\n  },\n\n  clearAuthData(state) {\n    state.idToken = null;\n    state.userName = null;\n    state.userID = null;\n    state.isLogin = false;\n    state.authenticated = 0;\n    // state.UUID = null;\n  },\n\n};\n\nconst actions = {\n  async login({\n    commit\n  }, {\n    username,\n    password\n  }) {\n    commit(types.USER_LOGIN_REQUEST);\n    try {\n      const response = await apis.login(username, password);\n\n      console.log(\"store login status :\", response);\n      if (response.status === 1) {\n        //store in local storage\n        const now = new Date();\n\n        const expirationDate = new Date(now.getTime() + response.data.payload.exp);\n        console.log(\"Time exp: \", expirationDate);\n\n        const idToken = response.data.jwtToken;\n        const userID = response.data.payload['custom:uid'];\n\n        localStorage.setItem('idToken', idToken);\n        localStorage.setItem('userName', username);\n        localStorage.setItem('userID', userID);\n        localStorage.setItem('expirationDate', expirationDate);\n\n        commit('authUser', {\n          'idToken': idToken,\n          'userID': userID,\n          'userName': username,\n        });\n\n        commit(types.USER_LOGIN_SUCCESS, {\n          credentials: response.data\n        });\n      } else if (response.status === 2) {\n        commit(types.USER_LOGIN_PASS_CHALLENGE_NEEDED, {\n          data: response.data\n        });\n      }\n      return response.status;\n    } catch (e) {\n      commit(types.USER_LOGIN_FAILURE);\n      throw e;\n    }\n  },\n\n  setLogoutTime({\n    commit\n  }, expirationTime) {\n    setTimeout(() => {\n      commit('logout');\n    }, expirationTime * 1000);\n  },\n\n  logout({\n    commit\n  }, routerData) {\n    commit('clearAuthData');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('idToken');\n    localStorage.removeItem('userName');\n    localStorage.removeItem('userID');\n    routerData.push('/login');\n  },\n\n  tryAutoLogin({\n    commit\n  }, routerData) {\n    const token = localStorage.getItem('idToken');\n    if (!token) {\n      return;\n    }\n    const expirationDate = localStorage.getItem('expirationDate');\n    const now = new Date();\n    if (now >= expirationDate) {\n      return;\n    }\n    const userID = localStorage.getItem('userID');\n    const userName = localStorage.getItem('userName');\n    console.log('username', userName);\n    commit('authUser', {\n      'idToken': token,\n      'userID': userID,\n      'userName': userName,\n    });\n    routerData.push('/mycard');\n  },\n\n\n  // async authenticate({ commit }) {\n  //   commit(types.USER_LOGIN_REQUEST);\n  //   try {\n  //     const credentials = await apis.authenticate();\n  //     commit(types.USER_LOGIN_SUCCESS, { credentials });\n  //   } catch (e) {\n  //     commit(types.USER_LOGIN_FAILURE);\n  //     throw e;\n  //   }\n  // },\n};\n\nconst getters = {\n  getUserName() {\n    return state.userName;\n  },\n};\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"]}]}