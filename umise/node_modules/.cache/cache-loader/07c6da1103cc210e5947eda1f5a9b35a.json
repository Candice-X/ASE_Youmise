{"remainingRequest":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/babel-loader/lib/index.js!/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/eslint-loader/index.js??ref--18-0!/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/src/store/modules/user.js","dependencies":[{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/src/store/modules/user.js","mtime":1521570804000},{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/package.json","mtime":1521570804000},{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/cache-loader/dist/cjs.js","mtime":1521602987000},{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/@babel/runtime/helpers/defineProperty\";\n\nvar _mutations;\n\nimport apis from '../../api/user';\nimport { init } from '../../api/apiGatewayClient';\nimport * as types from '../mutation-types';\nvar state = {\n  userName: null,\n  idToken: null,\n  userID: null,\n  // UUID: null,\n  isLogin: false,\n  loading: false,\n  authenticated: 0,\n  challengeData: {}\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, types.USER_LOGIN_REQUEST, function (state) {\n  state.loading = true;\n  state.authenticated = 0;\n}), _defineProperty(_mutations, types.USER_LOGIN_SUCCESS, function (state, _ref) {\n  var idToken = _ref.idToken;\n  state.loading = false;\n  state.authenticated = 1; // const keys = credentials.data.Credentials;\n  // init(keys.AccessKeyId, keys.SecretKey, keys.SessionToken);\n}), _defineProperty(_mutations, types.USER_LOGIN_FAILURE, function (state) {\n  state.loading = false;\n  state.authenticated = 0;\n}), _defineProperty(_mutations, types.USER_LOGIN_PASS_CHALLENGE_NEEDED, function (state, _ref2) {\n  var data = _ref2.data;\n  state.loading = false;\n  state.authenticated = 2;\n  delete data.userAttributes.email_verified;\n  state.challengeData = data;\n}), _defineProperty(_mutations, types.USER_LOGIN_PASS_CHALLENGE_REQUEST, function (state) {\n  state.loading = true;\n  state.challengeData.cognitoUser = null;\n}), _defineProperty(_mutations, types.USER_LOGIN_PASS_CHALLENGE_SUCCESS, function (state, _ref3) {\n  var idToken = _ref3.idToken;\n  state.loading = false;\n  state.authenticated = 1; // const keys = credentials.data.Credentials;\n  // init(keys.AccessKeyId, keys.SecretKey, keys.SessionToken);\n}), _defineProperty(_mutations, types.USER_LOGIN_PASS_CHALLENGE_FAILURE, function (state) {\n  state.loading = false;\n}), _defineProperty(_mutations, \"authUser\", function authUser(state, userData) {\n  state.userName = userData.userName;\n  state.idToken = userData.idToken;\n  state.userID = userData.userID;\n  state.isLogin = true;\n  state.authenticated = 1; // state.UUID =userData.UUID;\n}), _defineProperty(_mutations, \"clearAuthData\", function clearAuthData(state) {\n  state.idToken = null;\n  state.userName = null;\n  state.userID = null;\n  state.isLogin = false;\n  state.authenticated = 0; // state.UUID = null;\n}), _mutations);\nvar actions = {\n  login: function () {\n    var _login = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref4, _ref5) {\n      var commit, username, password, response, now, expirationDate, idToken, userID;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref4.commit;\n              username = _ref5.username, password = _ref5.password;\n              commit(types.USER_LOGIN_REQUEST);\n              _context.prev = 3;\n              _context.next = 6;\n              return apis.login(username, password);\n\n            case 6:\n              response = _context.sent;\n              console.log(\"store login status :\", response);\n\n              if (response.status === 1) {\n                //store in local storage\n                now = new Date();\n                expirationDate = new Date(now.getTime() + response.data.payload.exp);\n                console.log(\"Time exp: \", expirationDate);\n                idToken = response.data.jwtToken;\n                userID = response.data.payload['custom:uid'];\n                localStorage.setItem('idToken', idToken);\n                localStorage.setItem('userName', username);\n                localStorage.setItem('userID', userID);\n                localStorage.setItem('expirationDate', expirationDate);\n                commit('authUser', {\n                  'idToken': idToken,\n                  'userID': userID,\n                  'userName': username\n                });\n                commit(types.USER_LOGIN_SUCCESS, {\n                  credentials: response.data\n                });\n              } else if (response.status === 2) {\n                commit(types.USER_LOGIN_PASS_CHALLENGE_NEEDED, {\n                  data: response.data\n                });\n              }\n\n              return _context.abrupt(\"return\", response.status);\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              commit(types.USER_LOGIN_FAILURE);\n              throw _context.t0;\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[3, 12]]);\n    }));\n\n    return function login(_x, _x2) {\n      return _login.apply(this, arguments);\n    };\n  }(),\n  // async passwordChallenge({ commit, state }, { password }) {\n  //   const { cognitoUser } = state.challengeData;\n  //   commit(types.USER_LOGIN_PASS_CHALLENGE_REQUEST);\n  //   try {\n  //     const userAttributes = { ...state.challengeData.userAttributes };\n  //     const credentials = await apis.passwordChallenge(cognitoUser, password, userAttributes);\n  //     commit(types.USER_LOGIN_PASS_CHALLENGE_SUCCESS, { credentials });\n  //   } catch (e) {\n  //     commit(types.USER_LOGIN_PASS_CHALLENGE_FAILURE);\n  //     throw e;\n  //   }\n  // },\n  // login({ commit, dispatch }, authData) {\n  //   //success, status 200. Then auth user \n  //   //store in local storage\n  //   const now = new Date();\n  //   const expirationDate = new Date(now.getTime() + res.data.expiresIn * 1000);\n  //   localStorage.setItem('idToken', res.data.idToken);\n  //   localStorage.setItem('userName', res.data.userName);\n  //   localStorage.setItem('userID', res.data.userID);\n  //   localStorage.setItem('expirationDate', expirationDate);\n  //   // commit('authUser',{\n  //   //     idToken: res.data.idToken;\n  //   //     userID \n  //   // });\n  //   //if success, set the expiration TIME for the auto logout\n  //   //  dispatch('setLogoutTime',res.data.expiresIn);   \n  // },\n  setLogoutTime: function setLogoutTime(_ref6, expirationTime) {\n    var commit = _ref6.commit;\n    setTimeout(function () {\n      commit('logout');\n    }, expirationTime * 1000);\n  },\n  logout: function logout(_ref7, routerData) {\n    var commit = _ref7.commit;\n    commit('clearAuthData');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('idToken');\n    localStorage.removeItem('userName');\n    localStorage.removeItem('userID');\n    routerData.push('/login');\n  },\n  tryAutoLogin: function tryAutoLogin(_ref8, routerData) {\n    var commit = _ref8.commit;\n    var token = localStorage.getItem('idToken');\n\n    if (!token) {\n      return;\n    }\n\n    var expirationDate = localStorage.getItem('expirationDate');\n    var now = new Date();\n\n    if (now >= expirationDate) {\n      return;\n    }\n\n    var userID = localStorage.getItem('userID');\n    var userName = localStorage.getItem('userName');\n    console.log('username', userName);\n    commit('authUser', {\n      'idToken': token,\n      'userID': userID,\n      'userName': userName\n    });\n    routerData.push('/mycard');\n  }\n};\nvar getters = {\n  getUserName: function getUserName() {\n    return state.userName;\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};",{"version":3,"sources":["src/store/modules/user.js"],"names":["apis","init","types","state","userName","idToken","userID","isLogin","loading","authenticated","challengeData","mutations","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAILURE","USER_LOGIN_PASS_CHALLENGE_NEEDED","data","userAttributes","email_verified","USER_LOGIN_PASS_CHALLENGE_REQUEST","cognitoUser","USER_LOGIN_PASS_CHALLENGE_SUCCESS","USER_LOGIN_PASS_CHALLENGE_FAILURE","userData","actions","login","commit","username","password","response","console","log","status","now","Date","expirationDate","getTime","payload","exp","jwtToken","localStorage","setItem","credentials","setLogoutTime","expirationTime","setTimeout","logout","routerData","removeItem","push","tryAutoLogin","token","getItem","getters","getUserName"],"mappings":"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","sourceRoot":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise","sourcesContent":["import apis from '../../api/user';\nimport { init } from '../../api/apiGatewayClient';\nimport * as types from '../mutation-types';\n\n\n\nconst state = {\n  userName: null,\n  idToken: null,\n\tuserID: null, \n\t// UUID: null,\n  isLogin: false,\n\n  loading: false,\n  authenticated: 0,\n  challengeData: {},\n};\n\nconst mutations = {\n\t[types.USER_LOGIN_REQUEST](state) {\n    state.loading = true;\n    state.authenticated = 0;\n  },\n\n  [types.USER_LOGIN_SUCCESS](state, { idToken }) {\n    state.loading = false;\n    state.authenticated = 1;\n    // const keys = credentials.data.Credentials;\n    // init(keys.AccessKeyId, keys.SecretKey, keys.SessionToken);\n  },\n\n  [types.USER_LOGIN_FAILURE](state) {\n    state.loading = false;\n    state.authenticated = 0;\n  },\n\n  [types.USER_LOGIN_PASS_CHALLENGE_NEEDED](state, { data }) {\n    state.loading = false;\n    state.authenticated = 2;\n    delete data.userAttributes.email_verified;\n    state.challengeData = data;\n  },\n\n  [types.USER_LOGIN_PASS_CHALLENGE_REQUEST](state) {\n    state.loading = true;\n    state.challengeData.cognitoUser = null;\n  },\n\n  [types.USER_LOGIN_PASS_CHALLENGE_SUCCESS](state, { idToken }) {\n    state.loading = false;\n    state.authenticated = 1;\n    // const keys = credentials.data.Credentials;\n   // init(keys.AccessKeyId, keys.SecretKey, keys.SessionToken);\n  },\n\n  [types.USER_LOGIN_PASS_CHALLENGE_FAILURE](state) {\n    state.loading = false;\n  },\n\n\tauthUser(state, userData) {\n\t\tstate.userName = userData.userName;\n\t\tstate.idToken = userData.idToken;\n\t\tstate.userID = userData.userID;\n\t\tstate.isLogin = true;\n\t\tstate.authenticated = 1;\n\t\t// state.UUID =userData.UUID;\n\t\t},\n\t\n  clearAuthData(state) {\n    state.idToken = null;\n    state.userName = null;\n\t\tstate.userID = null;\n\t\tstate.isLogin = false;\n\t\tstate.authenticated =0;\n\t\t// state.UUID = null;\n  },\n\n};\n\nconst actions = {\n\tasync login({ commit }, { username, password }) {\n    commit(types.USER_LOGIN_REQUEST);\n    try {\n\t\t\tconst response = await apis.login(username, password);\n\t\t\t\n\t\t\tconsole.log(\"store login status :\",response);\n      if (response.status === 1) {\n\t\t\t\t  //store in local storage\n\t\t\t\tconst now = new Date();\n\t\t\t\t\n\t\t\t\tconst expirationDate = new Date(now.getTime() + response.data.payload.exp);\n\t\t\t\tconsole.log(\"Time exp: \",expirationDate);\n\n\t\t\t\tconst idToken = response.data.jwtToken;\n\t\t\t\tconst userID = response.data.payload['custom:uid'];\n\t\t\t\t \n\t\t\t\tlocalStorage.setItem('idToken', idToken);\n\t\t\t\tlocalStorage.setItem('userName', username);\n\t\t\t\tlocalStorage.setItem('userID', userID);\n\t\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\t\t\n\t\t\t\tcommit('authUser', {\n\t\t\t\t\t'idToken': idToken,\n\t\t\t\t\t'userID': userID,\n\t\t\t\t\t'userName': username,\n\t\t\t\t});\n\n        commit(types.USER_LOGIN_SUCCESS, { credentials: response.data });\n      } else if (response.status === 2) {\n        commit(types.USER_LOGIN_PASS_CHALLENGE_NEEDED, { data: response.data });\n      }\n      return response.status;\n    } catch (e) {\n      commit(types.USER_LOGIN_FAILURE);\n      throw e;\n    }\n  },\n\n\n  // async passwordChallenge({ commit, state }, { password }) {\n  //   const { cognitoUser } = state.challengeData;\n  //   commit(types.USER_LOGIN_PASS_CHALLENGE_REQUEST);\n  //   try {\n  //     const userAttributes = { ...state.challengeData.userAttributes };\n  //     const credentials = await apis.passwordChallenge(cognitoUser, password, userAttributes);\n  //     commit(types.USER_LOGIN_PASS_CHALLENGE_SUCCESS, { credentials });\n  //   } catch (e) {\n  //     commit(types.USER_LOGIN_PASS_CHALLENGE_FAILURE);\n  //     throw e;\n  //   }\n  // },\n  // login({ commit, dispatch }, authData) {\n  //   //success, status 200. Then auth user \n\n  //   //store in local storage\n  //   const now = new Date();\n  //   const expirationDate = new Date(now.getTime() + res.data.expiresIn * 1000);\n\n  //   localStorage.setItem('idToken', res.data.idToken);\n  //   localStorage.setItem('userName', res.data.userName);\n  //   localStorage.setItem('userID', res.data.userID);\n  //   localStorage.setItem('expirationDate', expirationDate);\n\n  //   // commit('authUser',{\n  //   //     idToken: res.data.idToken;\n  //   //     userID \n  //   // });\n\n  //   //if success, set the expiration TIME for the auto logout\n  //   //  dispatch('setLogoutTime',res.data.expiresIn);   \n  // },\n\n  setLogoutTime({ commit }, expirationTime) {\n    setTimeout(() => {\n      commit('logout');\n    }, expirationTime * 1000);\n  },\n\n  logout({ commit }, routerData) {\n    commit('clearAuthData');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('idToken');\n    localStorage.removeItem('userName');\n    localStorage.removeItem('userID');\n    routerData.push('/login');\n\t},\n\t\n  tryAutoLogin({commit},routerData) {\n    const token = localStorage.getItem('idToken');\n    if (!token) {\n      return;\n    }\n    const expirationDate = localStorage.getItem('expirationDate');\n    const now = new Date();\n    if (now >= expirationDate) {\n      return;\n    }\n    const userID = localStorage.getItem('userID');\n\t\tconst userName = localStorage.getItem('userName');\n\t\tconsole.log('username',userName);\n    commit('authUser', {\n      'idToken': token,\n      'userID': userID,\n      'userName': userName,\n\t\t});\n\t\trouterData.push('/mycard');\n  },\n\n\n  // async authenticate({ commit }) {\n  //   commit(types.USER_LOGIN_REQUEST);\n  //   try {\n  //     const credentials = await apis.authenticate();\n  //     commit(types.USER_LOGIN_SUCCESS, { credentials });\n  //   } catch (e) {\n  //     commit(types.USER_LOGIN_FAILURE);\n  //     throw e;\n  //   }\n  // },\n};\n\nconst getters = {\n\tgetUserName(){\n\t\treturn state.userName;\n\t},\n};\n\nexport default {\n  state,\n  mutations,\n\tactions,\n\tgetters,\n};\n"]}]}