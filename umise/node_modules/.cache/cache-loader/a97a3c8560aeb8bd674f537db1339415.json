{"remainingRequest":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/babel-loader/lib/index.js!/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/eslint-loader/index.js??ref--18-0!/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/src/api/user.js","dependencies":[{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/src/api/user.js","mtime":1521570804000},{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/package.json","mtime":1521570804000},{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/cache-loader/dist/cjs.js","mtime":1521602987000},{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.promise\";\n\n// import AWS from 'aws-sdk';\n// import { CognitoUserPool, CognitoUserAttribute, CognitoUser } from 'amazon-cognito-identity-js';\nvar AmazonCognitoIdentity = require('amazon-cognito-identity-js'); // console.log(configs);\n// console.log(configs.POOL_ID);\n// console.log(configs.CLIENT_ID);\n\n\nvar poolData = {\n  UserPoolId: process.env.VUE_APP_POOL_ID,\n  ClientId: process.env.VUE_APP_CLIENT_ID\n};\nconsole.log(process.env.VUE_APP_POOL_ID);\nconsole.log(process.env.VUE_APP_CLIENT_ID);\nvar userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData); // var cognitoUser = \"\";\n// const getIAMCredentials = (idToken) => {\n//   // const awsRegion = process.env.VUE_APP_AWS_REGION;\n//   const awsRegion = \"us-east-2\";\n//   const userPoolUrl = `cognito-idp.${awsRegion}.amazonaws.com/${poolData.UserPoolId}`;\n//   console.log(\"idToken :\", idToken);\n//   return new Promise((resolve, reject) => {\n//     AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n//       // IdentityPoolId: process.env.VUE_APP_IDENTITY_POOL_ID,\n//       IdentityPoolId: 'us-east-2:3d4fe29b-059e-4562-81ab-ab84e6b4a776',\n//       Logins: { [userPoolUrl]: idToken },\n//     });\n//     if (!AWS.config.credentials.expired) {\n//       return resolve(AWS.config.credentials);\n//     }\n//     AWS.config.region = awsRegion;\n//     AWS.config.credentials.refresh((error) => {\n//       if (error) {\n//         return reject(error);\n//       }\n//       return resolve(AWS.config.credentials);\n//     });\n//     return true;\n//   });\n// };\n\nexport default {\n  login: function login(Username, Password) {\n    var authenticationData = {\n      Username: Username,\n      Password: Password\n    };\n    var authDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);\n    var userData = {\n      Pool: userPool,\n      Username: Username\n    };\n    var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\n    return new Promise(function (resolve, reject) {\n      cognitoUser.authenticateUser(authDetails, {\n        onSuccess: function onSuccess(result) {\n          resolve({\n            status: 1,\n            data: result.getIdToken()\n          });\n        },\n        onFailure: function onFailure(err) {\n          return reject(err);\n        } // newPasswordRequired: (userAttributes, requiredAttributes) =>\n        //   resolve({\n        //     status: 2,\n        //     data: {\n        //       userAttributes,\n        //       requiredAttributes,\n        //       cognitoUser,\n        //     },\n        //   }),\n\n      });\n    });\n  }\n};",{"version":3,"sources":["src/api/user.js"],"names":["AmazonCognitoIdentity","require","poolData","UserPoolId","process","env","VUE_APP_POOL_ID","ClientId","VUE_APP_CLIENT_ID","console","log","userPool","CognitoUserPool","login","Username","Password","authenticationData","authDetails","AuthenticationDetails","userData","Pool","cognitoUser","CognitoUser","Promise","resolve","reject","authenticateUser","onSuccess","status","data","result","getIdToken","onFailure","err"],"mappings":";;AAAA;AACA;AAEA,IAAMA,wBAAwBC,QAAQ,4BAAR,CAA9B,C,CAEA;AACA;AACA;;;AAEA,IAAMC,WAAW;AACfC,cAAYC,QAAQC,GAAR,CAAYC,eADT;AAEfC,YAAUH,QAAQC,GAAR,CAAYG;AAFP,CAAjB;AAIAC,QAAQC,GAAR,CAAYN,QAAQC,GAAR,CAAYC,eAAxB;AACAG,QAAQC,GAAR,CAAYN,QAAQC,GAAR,CAAYG,iBAAxB;AACA,IAAMG,WAAW,IAAIX,sBAAsBY,eAA1B,CAA0CV,QAA1C,CAAjB,C,CACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;AACbW,OADa,iBACPC,QADO,EACGC,QADH,EACa;AACxB,QAAMC,qBAAqB;AAAEF,wBAAF;AAAYC;AAAZ,KAA3B;AAEA,QAAME,cAAc,IAAIjB,sBAAsBkB,qBAA1B,CAAgDF,kBAAhD,CAApB;AAEA,QAAMG,WAAW;AACfC,YAAMT,QADS;AAEfG;AAFe,KAAjB;AAIA,QAAMO,cAAc,IAAIrB,sBAAsBsB,WAA1B,CAAsCH,QAAtC,CAApB;AACA,WAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCJ,kBAAYK,gBAAZ,CAA6BT,WAA7B,EAA0C;AACxCU,mBAAW,2BAAS;AAChBH,kBAAQ;AAAEI,oBAAQ,CAAV;AAAaC,kBAAOC,OAAOC,UAAP;AAApB,WAAR;AACD,SAHqC;AAKxCC,mBAAW;AAAA,iBAAOP,OAAOQ,GAAP,CAAP;AAAA,SAL6B,CAMxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAdwC,OAA1C;AAgBD,KAjBM,CAAP;AAkBD;AA7BY,CAAf","sourceRoot":"/Users/Dorothy/dev/umise-3env/ASE_Youmise/umise","sourcesContent":["// import AWS from 'aws-sdk';\n// import { CognitoUserPool, CognitoUserAttribute, CognitoUser } from 'amazon-cognito-identity-js';\n\nconst AmazonCognitoIdentity = require('amazon-cognito-identity-js');\n\n// console.log(configs);\n// console.log(configs.POOL_ID);\n// console.log(configs.CLIENT_ID);\n\nconst poolData = {\n  UserPoolId: process.env.VUE_APP_POOL_ID,\n  ClientId: process.env.VUE_APP_CLIENT_ID,\n};\nconsole.log(process.env.VUE_APP_POOL_ID);\nconsole.log(process.env.VUE_APP_CLIENT_ID);\nconst userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n// var cognitoUser = \"\";\n\n// const getIAMCredentials = (idToken) => {\n//   // const awsRegion = process.env.VUE_APP_AWS_REGION;\n//   const awsRegion = \"us-east-2\";\n//   const userPoolUrl = `cognito-idp.${awsRegion}.amazonaws.com/${poolData.UserPoolId}`;\n\n//   console.log(\"idToken :\", idToken);\n//   return new Promise((resolve, reject) => {\n//     AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n//       // IdentityPoolId: process.env.VUE_APP_IDENTITY_POOL_ID,\n//       IdentityPoolId: 'us-east-2:3d4fe29b-059e-4562-81ab-ab84e6b4a776',\n//       Logins: { [userPoolUrl]: idToken },\n//     });\n//     if (!AWS.config.credentials.expired) {\n//       return resolve(AWS.config.credentials);\n//     }\n//     AWS.config.region = awsRegion;\n//     AWS.config.credentials.refresh((error) => {\n//       if (error) {\n//         return reject(error);\n//       }\n//       return resolve(AWS.config.credentials);\n//     });\n//     return true;\n//   });\n// };\n\nexport default {\n  login(Username, Password) {\n    const authenticationData = { Username, Password };\n\n    const authDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);\n\n    const userData = {\n      Pool: userPool,\n      Username,\n    };\n    const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\n    return new Promise((resolve, reject) => {\n      cognitoUser.authenticateUser(authDetails, {\n        onSuccess: result =>{\n            resolve({ status: 1, data:  result.getIdToken(),});\n          },\n\n        onFailure: err => reject(err),\n        // newPasswordRequired: (userAttributes, requiredAttributes) =>\n        //   resolve({\n        //     status: 2,\n        //     data: {\n        //       userAttributes,\n        //       requiredAttributes,\n        //       cognitoUser,\n        //     },\n        //   }),\n      });\n    });\n  },\n\n  // signup(Username, Password, email) {\n\n  //   const authenticationData = { Username, Password, email };\n  //   const poolData = {\n  //     UserPoolId: 'us-west-2_uJLztlrtQ',\n  //     ClientId: '2igcs733eqdu3iuc90f0uu7jri',\n  //   };\n  //   var userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n\n  //   var attributeList = [];\n\n  //   var dataEmail = {\n  //     Name: 'email',\n  //     Value: email\n  //   };\n  //   var attributeEmail = new AmazonCognitoIdentity.CognitoUserAttribute(dataEmail);\n\n  //   attributeList.push(attributeEmail);\n\n  //   userPool.signUp(Username, Password, attributeList, null, function(err, result) {\n  //     if (err) {\n  //       alert(err);\n  //       return;\n  //     }\n  //     cognitoUser = result.user;\n  //     console.log('user name is ' + cognitoUser.getUsername());\n  //   });\n    \n  // },\n\n  // confirmverify(code) {\n  //   cognitoUser.confirmRegistration(code, true, function(err, result) {\n  //                 if (err) {\n  //                     alert(err);\n  //                     return;\n  //                 }\n  //                 alert(\"Verified Successfully. Please Log in again\");\n  //   });\n  \n  // },\n\n  // passwordChallenge(cognitoUser, password, userAttributes) {\n  //   return new Promise((resolve, reject) => {\n  //     cognitoUser.completeNewPasswordChallenge(password, userAttributes, {\n  //       onSuccess: result =>\n  //         getIAMCredentials(result.getIdToken().getJwtToken()).then(credentials =>\n  //           resolve(credentials)),\n  //       onFailure: err => reject(err),\n  //     });\n  //   });\n  // },\n\n  // logout() {\n  //   let cognitoUser = userPool.getCurrentUser();\n  //   return ;\n  // },\n\n  // authenticate() {\n  //   return new Promise((resolve, reject) => {\n  //     const cognitoUser = userPool.getCurrentUser();\n\n  //     if (!cognitoUser) {\n  //       return reject(new Error('No user in local storage'));\n  //     }\n\n  //     cognitoUser.getSession((err, session) => {\n  //       if (err) {\n  //         return reject(err);\n  //       }\n\n  //       if (!session.isValid()) {\n  //         const refreshToken = session.getRefreshToken().getToken();\n  //         cognitoUser.refreshSession(refreshToken, (e, result) => {\n  //           if (e) {\n  //             return reject(new Error('Session cannot be refreshed'));\n  //           }\n  //           return getIAMCredentials(result.getIdToken().getJwtToken()).then(credentials =>\n  //             resolve(credentials));\n  //         });\n  //       }\n  //       return getIAMCredentials(session.getIdToken().getJwtToken()).then(credentials =>\n  //         resolve(credentials));\n  //     });\n\n  //     return true;\n  //   });\n  // },\n};\n"]}]}